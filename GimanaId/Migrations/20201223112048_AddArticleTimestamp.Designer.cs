// <auto-generated />
using System;
using GimanaIdApi.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GimanaIdApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201223112048_AddArticleTimestamp")]
    partial class AddArticleTimestamp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ArticleUser", b =>
                {
                    b.Property<Guid>("ArticlesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ArticlesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ArticleUser");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleHistory");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleIssue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ArticleHistoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<bool>("Resolved")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SubmitterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleHistoryId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("ArticleIssue");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticlePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ArticleHistoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("PartNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleHistoryId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticlePart");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ArticleHistoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SubmitterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleHistoryId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("ArticleRating");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ArticlePartId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("StepNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticlePartId");

                    b.ToTable("ArticleStep");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.AuthToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IPAddress")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.EmailVerificationToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Token");

                    b.ToTable("EmailVerificationToken");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.PasswordCredential", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetTokenToken")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("PasswordResetTokenToken");

                    b.ToTable("PasswordCredential");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.PasswordResetToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Token");

                    b.ToTable("PasswordResetToken");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("ArticleHistoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BanLiftedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleHistoryId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.UserEmail", b =>
                {
                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.Property<string>("VerificationTokenToken")
                        .HasColumnType("text");

                    b.HasKey("EmailAddress");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.HasIndex("VerificationTokenToken");

                    b.ToTable("UserEmail");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.UserPrivilege", b =>
                {
                    b.Property<string>("PrivilegeName")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PrivilegeName");

                    b.HasIndex("UserId");

                    b.ToTable("UserPrivilege");
                });

            modelBuilder.Entity("ArticleUser", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GimanaIdApi.Entities.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.Article", b =>
                {
                    b.OwnsOne("GimanaIdApi.Entities.ValueObjects.Image", "HeroImage", b1 =>
                        {
                            b1.Property<Guid>("ArticleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Base64EncodedData")
                                .HasColumnType("text");

                            b1.Property<string>("FileFormat")
                                .HasColumnType("text");

                            b1.HasKey("ArticleId");

                            b1.ToTable("Articles");

                            b1.WithOwner()
                                .HasForeignKey("ArticleId");
                        });

                    b.Navigation("HeroImage");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleHistory", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.Article", null)
                        .WithMany("Histories")
                        .HasForeignKey("ArticleId");

                    b.OwnsOne("GimanaIdApi.Entities.ValueObjects.Image", "HeroImage", b1 =>
                        {
                            b1.Property<Guid>("ArticleHistoryId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Base64EncodedData")
                                .HasColumnType("text");

                            b1.Property<string>("FileFormat")
                                .HasColumnType("text");

                            b1.HasKey("ArticleHistoryId");

                            b1.ToTable("ArticleHistory");

                            b1.WithOwner()
                                .HasForeignKey("ArticleHistoryId");
                        });

                    b.Navigation("HeroImage");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleIssue", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.ArticleHistory", null)
                        .WithMany("Issues")
                        .HasForeignKey("ArticleHistoryId");

                    b.HasOne("GimanaIdApi.Entities.Entities.Article", "Article")
                        .WithMany("Issues")
                        .HasForeignKey("ArticleId");

                    b.HasOne("GimanaIdApi.Entities.Entities.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");

                    b.Navigation("Article");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticlePart", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.ArticleHistory", null)
                        .WithMany("Parts")
                        .HasForeignKey("ArticleHistoryId");

                    b.HasOne("GimanaIdApi.Entities.Entities.Article", null)
                        .WithMany("Parts")
                        .HasForeignKey("ArticleId");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleRating", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.ArticleHistory", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ArticleHistoryId");

                    b.HasOne("GimanaIdApi.Entities.Entities.Article", "Article")
                        .WithMany("Ratings")
                        .HasForeignKey("ArticleId");

                    b.HasOne("GimanaIdApi.Entities.Entities.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");

                    b.Navigation("Article");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleStep", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.ArticlePart", null)
                        .WithMany("Steps")
                        .HasForeignKey("ArticlePartId");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.AuthToken", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.User", "User")
                        .WithMany("AuthTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.PasswordCredential", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.PasswordResetToken", "PasswordResetToken")
                        .WithMany()
                        .HasForeignKey("PasswordResetTokenToken");

                    b.HasOne("GimanaIdApi.Entities.Entities.User", "User")
                        .WithOne("PasswordCredential")
                        .HasForeignKey("GimanaIdApi.Entities.Entities.PasswordCredential", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PasswordResetToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.User", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.ArticleHistory", null)
                        .WithMany("Contributors")
                        .HasForeignKey("ArticleHistoryId");

                    b.OwnsOne("GimanaIdApi.Entities.ValueObjects.Image", "ProfilePicture", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Base64EncodedData")
                                .HasColumnType("text");

                            b1.Property<string>("FileFormat")
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.UserEmail", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.User", null)
                        .WithOne("Email")
                        .HasForeignKey("GimanaIdApi.Entities.Entities.UserEmail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GimanaIdApi.Entities.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.HasOne("GimanaIdApi.Entities.Entities.EmailVerificationToken", "VerificationToken")
                        .WithMany()
                        .HasForeignKey("VerificationTokenToken");

                    b.Navigation("User");

                    b.Navigation("VerificationToken");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.UserPrivilege", b =>
                {
                    b.HasOne("GimanaIdApi.Entities.Entities.User", null)
                        .WithMany("Privileges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.Article", b =>
                {
                    b.Navigation("Histories");

                    b.Navigation("Issues");

                    b.Navigation("Parts");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticleHistory", b =>
                {
                    b.Navigation("Contributors");

                    b.Navigation("Issues");

                    b.Navigation("Parts");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.ArticlePart", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("GimanaIdApi.Entities.Entities.User", b =>
                {
                    b.Navigation("AuthTokens");

                    b.Navigation("Email");

                    b.Navigation("PasswordCredential");

                    b.Navigation("Privileges");
                });
#pragma warning restore 612, 618
        }
    }
}
